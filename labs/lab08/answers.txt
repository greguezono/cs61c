Scenario 1:
1) 0 hit rate because step size is exactly equal to the block size
2) Still 0 because the hit rate was initially 0 (shouldnt change)
3) Set block size to 32

Scenario 2:
1) 2
2) miss-hit-hit-hit
block-size = 16 but step size is 2, 
3) Every 4 accesses, there is a 3/4 hit rate. This keeps repeating so the hit rate is 3/4.
4) Our hit rate tends to go to 100% since all our data is stored in the cache (256 bytes in array and cache size is 256)
5) access 256 bytes of the array at a time before moving on, apply all of the functions to that subsection of the array before moving on.  

Scenario 3:
1) 0.5, 0. Overall 1/3.
2) 32 accesses, 16 misses
3) 16 accesses. Relates because L1 has 16 misses.
4) Rep Count because we only went through the array once. If we went through it more times then all the misses in L1 would be hits in L2 (none of the L1 cache blocks gets replaced since we have an additional L2 layer).
5) Stays the same for num blocks and increases for block size.

Exercise 2:
1) kji. Striding through C and A at 1. Striding through B at 0.
2) kij/ikj. Striding through C at n. A at 0. B at n.
3) Higher the stride, the slower the performance.

Exercise 3:
1)
2) Speedup increases up to 100 then decreases as you move up. This is the case because now you are less efficiently moving through the array (using less spatial locality).

